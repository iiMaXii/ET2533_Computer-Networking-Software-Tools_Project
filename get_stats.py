#!/usr/bin/env python

"""
This script produces LaTeX tables from the files generated by batch.bash
"""

from __future__ import division

import collections
import math
import glob

class ValueStats:
	def __init__(self):
		self.sum=0
		self.max=None
		self.min=None
		self.n=0

		# Variance
		self.K=None
		self.ex=0
		self.ex2=0

	def add_value(self, value):
		self.sum += value

		if self.max is None:
			self.max = value
		elif self.max < value:
			self.max = value
		
		if self.min is None:
			self.min = value
		elif self.min > value:
			self.min = value
				
		# Variance
		if (self.n == 0):
			self.K = value
		
		self.ex += value - self.K
		self.ex2 += (value - self.K) * (value - self.K)
		
		self.n += 1
	
	@property
	def mean(self):
		return self.sum / self.n
	
	@property
	def variance(self):
		return (self.ex2 - (self.ex * self.ex) / self.n) / (self.n - 1)
	
	@property
	def standard_deviation(self):
		return math.sqrt(self.variance)

# This value should be passed as a command line argument, but I'm too lazy for that
count_mahp = False

stats = {}

stat_reable = {
	'total_bytes' : 'Total Bytes [bytes]',
	'duration'    : 'Duration [s]',
	'tcp'         : 'TCP [bytes]',
	'udp'         : 'UDP [bytes]',
	'icmp'        : 'ICMP [bytes]',
	'tcp_mahp'    : 'TCP (MAHP) [bytes]',
	'udp_mahp'    : 'UDP (MAHP) [bytes]',
	'icmp_mahp'   : 'ICMP (MAHP) [bytes]'
}

def get_archive_name(stat_file):
	return 'archive{}.tar.gz'.format(stat_file[13])

if count_mahp:
	print '\\begin{table*}[t]'
	print '  \\centering'
	print '  \\begin{tabular}{l|l|l}'
	print '    Archive & Most Active Host Pair & Occurrences \\\\'
	print '    \\hline'
	
for filename in sorted(glob.glob("stats_archive[0-9].txt")):
	if count_mahp:
		print '    \\verb|{}|'.format(get_archive_name(filename)),

	stats[filename] = collections.OrderedDict([
		('total_bytes' , ValueStats()),
		('duration'    , ValueStats()),
		('tcp'         , ValueStats()),
		('udp'         , ValueStats()),
		('icmp'        , ValueStats()),
		('tcp_mahp'    , ValueStats()),
		('udp_mahp'    , ValueStats()),
		('icmp_mahp'   , ValueStats())
	])
	
	mahp_list = []
	
	with open(filename) as f:
		for line in f.readlines():
			data = line.split()

			stats[filename]['total_bytes'].add_value(int(data[0]))
			stats[filename]['duration'].add_value(float(data[1]))
			stats[filename]['tcp'].add_value(int(data[2]))
			stats[filename]['udp'].add_value(int(data[3]))
			stats[filename]['icmp'].add_value(int(data[4]))
			
			stats[filename]['tcp_mahp'].add_value(int(data[7]))
			stats[filename]['udp_mahp'].add_value(int(data[8]))
			stats[filename]['icmp_mahp'].add_value(int(data[9]))
			
			mahp_list.append('{} {}'.format(data[5], data[6]))
	
	if count_mahp:
		mahp_occurences_iter = collections.Counter(mahp_list).iteritems()
		
		mahp_first = mahp_occurences_iter.next()
		print '& \\verb|{}| & {} \\\\'.format(mahp_first[0], mahp_first[1])
		
		for mahp, occurences in mahp_occurences_iter:
			print '    & \\verb|{}| & {} \\\\'.format(mahp, occurences)
		
		print '    \\hline'
		
	else:
		print '\\begin{table*}[t]'
		print '  \\centering'
		print '  \\begin{tabular}{l|llll}'
		print '    Value [unit] & Min & Max & Mean & Standard Deviation \\\\'
		print '    \\hline'
		for stat_type, data in stats[filename].iteritems():
			print '    \\verb|{}| & {} & {} & {} & {} \\\\'.format(stat_reable[stat_type], data.min, data.max, data.mean, data.standard_deviation)
			
		print '  \\end{tabular}'
		print '  \\caption{{Statistics generated from archive \'{}\'}}'.format(get_archive_name(filename))
		print '  \\label{{tab:archive_stats{}}}'.format(filename[13])
		print '\\end{table*}'
		print

if count_mahp:
	print '  \\end{tabular}'
	print '  \\caption{Occurrences of Most Active Host Pair (MAHP) per archive}'
	print '  \\label{tab:mahp}'
	print '\\end{table*}'
